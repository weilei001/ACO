#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <cmath>
#include <time.h>
#include <random>
#include <vector>
#include "aco.h"
#include <algorithm>
#include <pluginlib/class_list_macros.h>

using namespace std;

PLUGINLIB_EXPORT_CLASS(ACO_planner::AcoPlannerROS, nav_core::BaseGlobalPlanner)

int mapSize; 
bool *OGM;                           // Occupancy grid map (true: obstacle, false: free)
vector<vector<float>> pheromoneMatrix;  // Pheromone matrix
random_device rd;
static default_random_engine generator(rd());

ofstream MyExcelFile("ACO_result.xlsx", ios::trunc);

int clock_gettime(clockid_t clk_id, struct timespect *tp); // Prototype

// Compute time difference between two timespec structures
timespec diff(timespec start, timespec end)
{
  timespec temp;
  if ((end.tv_nsec - start.tv_nsec) < 0)
  {
    temp.tv_sec = end.tv_sec - start.tv_sec - 1;
    temp.tv_nsec = 1000000000 + end.tv_nsec - start.tv_nsec;
  }
  else
  {
    temp.tv_sec = end.tv_sec - start.tv_sec;
    temp.tv_nsec = end.tv_nsec - start.tv_nsec;
  }
  return temp;
}

namespace ACO_planner
{
    // Default constructor
    AcoPlannerROS::AcoPlannerROS() {}

    // NodeHandle constructor
    AcoPlannerROS::AcoPlannerROS(ros::NodeHandle &nh)
    {
        ROSNodeHandle = nh;
    }

    // Constructor with name and costmap pointer
    AcoPlannerROS::AcoPlannerROS(std::string name, costmap_2d::Costmap2DROS *costmap_ros)
    {
        initialize(name, costmap_ros);
    }

    // Initialize the planner
    void AcoPlannerROS::initialize(std::string name, costmap_2d::Costmap2DROS *costmap_ros)
    {
        initialized_ = false;
        if (!initialized_)
        {
            costmap_ros_ = costmap_ros;
            costmap_ = costmap_ros_->getCostmap();

            ros::NodeHandle private_nh("~/" + name);
            _plan_pub = private_nh.advertise<nav_msgs::Path>("global_plan", 1);
            _frame_id = costmap_ros->getGlobalFrameID();

            originX = costmap_->getOriginX();
            originY = costmap_->getOriginY();

            width = costmap_->getSizeInCellsX();
            height = costmap_->getSizeInCellsY();
            resolution = costmap_->getResolution();
            mapSize = width * height;
 
            private_nh.param("initialPheromoneValue_", initialPheromoneValue, float(8.0));
            private_nh.param("Alpha_", Alpha, 1);
            private_nh.param("Beta_", Beta, 7);
            private_nh.param("EvaporationRate_", EvaporationRate, float(0.5));
            private_nh.param("NumberOfAnts_", NumberOfAnts, 30);
            private_nh.param("NumberOfIterations_", NumberOfIterations, 20);
           
            OGM = new bool[mapSize];

            // Build occupancy grid map from costmap data
            for (unsigned int iy = 0; iy < costmap_->getSizeInCellsY(); iy++)
            {
                for (unsigned int ix = 0; ix < costmap_->getSizeInCellsX(); ix++)
                {
                    unsigned int cost = static_cast<int>(costmap_->getCost(ix, iy));
                    OGM[iy * width + ix] = (cost != 0);
                }
            }

            MyExcelFile << "StartID\tStartX\tStartY\tGoalID\tGoalX\tGoalY\tPlannertime(ms)\tpathLength\tnumberOfCells\t" << endl;
            ROS_INFO("ACO planner initialized successfully");
            initialized_ = true;
        }
        else
        {
            ROS_WARN("This planner has already been initialized... doing nothing");
        }
    }

    // Create a plan from start to goal
    bool AcoPlannerROS::makePlan(const geometry_msgs::PoseStamped &start, const geometry_msgs::PoseStamped &goal,
                                 std::vector<geometry_msgs::PoseStamped> &plan)
    {
        if (!initialized_)
        {
            ROS_ERROR("The planner has not been initialized, please call initialize() to use the planner");
            return false;
        } 
        pheromoneMatrix.clear();
        ROS_DEBUG("Received start: %.2f, %.2f and goal: %.2f, %.2f",
                  start.pose.position.x, start.pose.position.y,
                  goal.pose.position.x, goal.pose.position.y);
        ROS_INFO("0");
        plan.clear();    
		        
        // Initialize pheromone matrix with initial value
        for (int i = 0; i < height; i++)
        {
            pheromoneMatrix.push_back(vector<float>());
        }
        for (int i = 0; i < height; i++)
        {
            for (int j = 0; j < width; j++)
            {
                pheromoneMatrix[i].push_back(initialPheromoneValue);
            }
        }         

        if (goal.header.frame_id != costmap_ros_->getGlobalFrameID())
        {
            ROS_ERROR("Goal frame %s does not match planner frame %s.",
                      goal.header.frame_id.c_str(), costmap_ros_->getGlobalFrameID().c_str());
            return false;
        }

        vector<geometry_msgs::PoseStamped> xuelinlin;
        tf::Stamped<tf::Pose> goal_tf;
        tf::Stamped<tf::Pose> start_tf;

        poseStampedMsgToTF(goal, goal_tf);
        poseStampedMsgToTF(start, start_tf);

        float startX = start.pose.position.x;
        float startY = start.pose.position.y;
        float goalX = goal.pose.position.x;
        float goalY = goal.pose.position.y;

        // Transform coordinates relative to map origin
        getCorrdinate(startX, startY);
        getCorrdinate(goalX, goalY);

        int startCell;
        int goalCell;

        if (isCellInsideMap(startX, startY) && isCellInsideMap(goalX, goalY))
        {
            startCell = convertToCellIndex(startX, startY);
            goalCell = convertToCellIndex(goalX, goalY);
            MyExcelFile << startCell << "\t" << start.pose.position.x << "\t" << start.pose.position.y
                        << "\t" << goalCell << "\t" << goal.pose.position.x << "\t" << goal.pose.position.y;
        }
        else
        {
            ROS_WARN("Start or goal is out of the map");
            return false;
        }  

        // Global planning using ACO if start and goal cells are valid
        if (isStartAndGoalCellsValid(startCell, goalCell))
        { 
            vector<int> bestPath;
            bestPath = acoPlanner(startCell, goalCell);
            if (bestPath.size() > 0)
            {
                // Convert cell indices to world coordinates and build plan
                for (int i = 0; i < bestPath.size(); i++)
                {
                    float x = 0.0;
                    float y = 0.0;
                    int index = bestPath[i];
                    convertToCoordinate(index, x, y);
                    geometry_msgs::PoseStamped pose = goal;
                    pose.pose.position.x = x;
                    pose.pose.position.y = y;
                    pose.pose.position.z = 0.0;
                    pose.pose.orientation.x = 0.0;
                    pose.pose.orientation.y = 0.0;
                    pose.pose.orientation.z = 0.0;
                    pose.pose.orientation.w = 1.0;
                    plan.push_back(pose);
                }

                // Calculate path length
                float path_length = 0.0;
                std::vector<geometry_msgs::PoseStamped>::iterator it = plan.begin();    
                geometry_msgs::PoseStamped last_pose = *it;
                it++;
                for (; it != plan.end(); ++it)
                {
                    path_length += hypot((*it).pose.position.x - last_pose.pose.position.x,
                                           (*it).pose.position.y - last_pose.pose.position.y);
                    last_pose = *it;
                }           
                cout << "The global path length: " << path_length << " meters" << endl;
                MyExcelFile << "\t" << path_length << "\t" << plan.size() << endl;

                // Publish the plan
                nav_msgs::Path path;
                path.poses.resize(plan.size());  
                if (plan.empty())
                {
                    path.header.frame_id = _frame_id;
                    path.header.stamp = ros::Time::now();
                }
                else
                {
                    path.header.frame_id = plan[0].header.frame_id;
                    path.header.stamp = plan[0].header.stamp;
                }           

                for (int i = 0; i < plan.size(); i++)
                {
                    path.poses[i] = plan[i];
                }
                _plan_pub.publish(path);
               
                return true;
            }
            else
            {
                ROS_WARN("Planner failed to find a path, choose another goal position");
                return false;
            }
        }
        else
        {
            ROS_WARN("Invalid start or goal");
            pheromoneMatrix.clear();
            return false;
        }
    }
    
    // Transform coordinates relative to map origin
    void AcoPlannerROS::getCorrdinate(float &x, float &y)
    {
        x = x - originX;
        y = y - originY;
    }

    // Convert world coordinates to cell index
    int AcoPlannerROS::convertToCellIndex(float x, float y)
    {
        int cellIndex;
        float newX = x / resolution;  // Compute cell x-index
        float newY = y / resolution;  // Compute cell y-index
        cellIndex = getCellIndex(newY, newX);
        return cellIndex;
    }

    // Convert cell index to world coordinates
    void AcoPlannerROS::convertToCoordinate(int index, float &x, float &y)
    {
        x = getCellColID(index) * resolution;
        y = getCellRowID(index) * resolution;
        x = x + originX;
        y = y + originY;
    }

    // Check if the coordinate is inside the map
    bool AcoPlannerROS::isCellInsideMap(float x, float y)
    {
        bool valid = true;
        if (x > (width * resolution) || y > (height * resolution))
           valid = false;
        return valid;
    }

    // Convert map cell indices to world coordinates
    void AcoPlannerROS::mapToWorld(double mx, double my, double &wx, double &wy)
    {
        costmap_2d::Costmap2D *costmap = costmap_ros_->getCostmap();
        wx = costmap->getOriginX() + mx * resolution;
        wy = costmap->getOriginY() + my * resolution;
    }

    // Run ACO planner to generate a path
    vector<int> AcoPlannerROS::acoPlanner(int startCell, int goalCell)
    {
        vector<int> bestPath;       
        timespec time1, time2;
        clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &time1);
        bestPath = findPath(startCell, goalCell);   
        clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &time2);      
        cout << "Time to generate best global path by ACO planner = " 
             << (diff(time1, time2).tv_sec) * 1e3 + (diff(time1, time2).tv_nsec) * 1e-6 
             << " microseconds" << endl;
        MyExcelFile << "\t" << (diff(time1, time2).tv_sec) * 1e3 + (diff(time1, time2).tv_nsec) * 1e-6;   
        return bestPath;  
    }

    // Find path using ACO algorithm
    vector<int> AcoPlannerROS::findPath(int startCell, int goalCell)
    {
        vector<int> bestPath;
        bestPath.clear();
        int nextCell;
        float best_path_length = 1000000.0;
        for (int i = 0; i < NumberOfIterations; i++)  // Iterations
        {
            vector<int> path;           // Store current path
            vector<int> neighbors;      // Store neighbor cell indices
            vector<float> probabilities; // Store transition probabilities
            for (int j = 0; j < NumberOfAnts; j++)    // For each ant
            {
                path.clear();
                neighbors.clear();
                probabilities.clear();
                int index = 0;
                int currentCell = startCell;
                path.push_back(currentCell);
                float path_length = 0.0;
                while (currentCell != goalCell)
                {                  
                    neighbors = getneighbors(currentCell, path);  // Get unvisited free neighbor cells
                    if (neighbors.empty())
                    {
                        path.clear();
                        neighbors.clear();
                        break;
                    }
                    else
                    {
                        // Compute transition probabilities and select next cell via roulette wheel
                        probabilities = computeTransitionProbabilities(goalCell, neighbors, currentCell);
                        nextCell = getNextCell(neighbors, probabilities);
                        neighbors.clear();
                        probabilities.clear();
                    }
                    currentCell = nextCell;
                    neighbors = getneighbors(currentCell, path);
                    index++;
                    path.push_back(currentCell);
                    if (currentCell == goalCell)
                    {
                        int CellID1, CellID2;
                        float step;
                        for (int k = 0; k < path.size() - 1; k++)
                        {
                            CellID1 = path[k];
                            CellID2 = path[k + 1];
                            step = getMoveCost(CellID1, CellID2);
                            path_length += step;
                        }
                        if (path_length < best_path_length)
                        {
                            best_path_length = path_length;
                            bestPath.clear();
                            bestPath = path;
                        }
                    }
                }
                // Update global pheromone matrix (evaporation and deposit)
                for (int i = 0; i < height; i++)
                {
                    for (int j = 0; j < width; j++)
                    {
                        pheromoneMatrix[i][j] = 0.8 * pheromoneMatrix[i][j];
                    }
                }
                for (int k = 0; k < path.size(); k++)
                {
                    pheromoneMatrix[path[k] / width][path[k] % width] += (50 / path_length);
                }
                path.clear();
            }
        }
        return bestPath;
    }

    // Check if start and goal cells are valid (free and not identical)
    bool AcoPlannerROS::isStartAndGoalCellsValid(int startCell, int goalCell)
    {
        bool isvalid = true;
        bool isFreeStartCell = isFree(startCell);
        bool isFreeGoalCell = isFree(goalCell);
    
        if (startCell == goalCell)
        {
            isvalid = false;
        }
        else
        {
            if (!isFreeStartCell && !isFreeGoalCell)
            {
                isvalid = false;
            }
            else
            {
                if (!isFreeStartCell)
                {
                    isvalid = false;
                }
                else
                {
                    if (!isFreeGoalCell)
                    {
                        isvalid = false;
                    }
                    else
                    {
                        if (findFreeNeighborCell(goalCell).size() == 0)
                        {
                            isvalid = false;
                        }
                        else
                        {
                            if (findFreeNeighborCell(startCell).size() == 0)
                            {
                                isvalid = false;
                            }
                        }
                    }
                }
            }
        }
        return isvalid;
    }

    // Find free neighbor cells for a given cell
    vector<int> AcoPlannerROS::findFreeNeighborCell(int CellID)
    {
        int rowID = getCellRowID(CellID);
        int colID = getCellColID(CellID);
        int neighborIndex;
        vector<int> freeNeighborCells;

        for (int i = -1; i <= 1; i++)
        {
            for (int j = -1; j <= 1; j++)
            {
                if ((rowID + i >= 0) && (rowID + i < height) &&
                    (colID + j >= 0) && (colID + j < width) &&
                    (!(i == 0 && j == 0)))
                {
                    neighborIndex = getCellIndex(rowID + i, colID + j);
                    if (isFree(neighborIndex))
                        freeNeighborCells.push_back(neighborIndex);
                }
            }
        }
        return freeNeighborCells;
    }

    // Check if a cell has already been visited in the current path
    bool AcoPlannerROS::isVisited(int nextIndex, vector<int> path)
    {
        for (int i = 0; i < path.size(); i++)
        {
            if (nextIndex == path[i])
                return true;
        }
        return false;
    }

    // Check if given cell coordinates are within map bounds
    bool AcoPlannerROS::IsInBounds(int nextX, int nextY)
    {
        if (nextX < 0 || nextX > width || nextY < 0 || nextY > height)
        {
            return false;
        }
        return true;
    }

    // Get neighbor cells for the current cell that are free and not visited
    vector<int> AcoPlannerROS::getneighbors(int currentCell, vector<int> path)
    {
        vector<int> neighborIndexes;
        neighborIndexes.clear();
        
        for (int i = -1; i <= 1; i++)
        {
            for (int j = -1; j <= 1; j++)
            {
                if (i == 0 && j == 0)
                    continue;
               
                int tmp1 = getCellColID(currentCell);
                int tmp2 = getCellRowID(currentCell);
                int nextX = tmp1 + i;   
                int nextY = tmp2 + j;
                if (nextX < 0 || nextX > width || nextY < 0 || nextY > height)
                    continue;
                int nextIndex = getCellIndex(nextY, nextX);
                if (!(i == 0 && j == 0) && OGM[nextIndex] && !isVisited(nextIndex, path))
                {
                    neighborIndexes.push_back(nextIndex);
                }
            }
        }
        return neighborIndexes;
    }

    // Compute transition probabilities for neighboring cells
    vector<float> AcoPlannerROS::computeTransitionProbabilities(int goalCell, vector<int> neighbors, int currentCell)
    {
        vector<float> temp_probabilities;
        float etha; // Heuristic value
        int temp1, temp2, temp3, temp4;
        
        temp1 = getCellColID(goalCell);
        temp2 = getCellRowID(goalCell);
       
        for (int i = 0; i < neighbors.size(); i++)
        {
            temp3 = getCellColID(neighbors[i]);
            temp4 = getCellRowID(neighbors[i]);
            float distance_x = fabs(temp1 - temp3);
            float distance_y = fabs(temp2 - temp4);
            if (distance_x == 0.0 && distance_y == 0.0)
            {
                distance_x = 0.0001;
                distance_y = 0.0001;
            }
            etha = fabs(1.0f / (distance_x + distance_y));
            temp_probabilities.push_back(pow(pheromoneMatrix[int(neighbors[i] / width)][int(neighbors[i] % width)], Alpha) * pow(etha, Beta));
        }
       
        float sum = 0.0;
        for (int j = 0; j < neighbors.size(); j++)
        {
            sum += temp_probabilities[j];
        }
        if (sum > 0.0)
        {
            for (int i = 0; i < neighbors.size(); i++)
            {
                temp_probabilities[i] = temp_probabilities[i] / sum;       
            }
        }
        
        return temp_probabilities;
    }

    // Check if a cell is free (not an obstacle)
    bool AcoPlannerROS::isFree(int CellID)
    {
        return OGM[CellID];
    }

    // Select the next cell using roulette wheel selection
    int AcoPlannerROS::getNextCell(vector<int> neighbors, vector<float> probabilities)
    {
        int NextCell;
        vector<float> cumulativeProbabilities;
        for (int i = 0; i < probabilities.size(); i++)
        {
            cumulativeProbabilities.push_back(probabilities[i]);
        }

        int pos = int(max_element(cumulativeProbabilities.begin(), cumulativeProbabilities.end()) - cumulativeProbabilities.begin());
        srand(time(0));
        float randomNumber = 1 - ((float)rand() / (float)RAND_MAX);  // Generate a random number

        for (int j = 0; j < neighbors.size(); j++)
        {
            if (randomNumber <= cumulativeProbabilities[j])
            {
                NextCell = neighbors[pos];
            }
            if (randomNumber > cumulativeProbabilities.back())
            {
                NextCell = neighbors[pos];
            }
        }
        return NextCell;
    }

    // Get movement cost between two cells (using diagonal and straight moves)
    float AcoPlannerROS::getMoveCost(int CellID1, int CellID2)
    {
        int i1 = getCellRowID(CellID1);
        int i2 = getCellRowID(CellID2);
        int j1 = getCellColID(CellID1);
        int j2 = getCellColID(CellID2);
        return getMoveCost(i1, j1, i2, j2);
    }

    // Get move cost based on cell positions
    float AcoPlannerROS::getMoveCost(int i1, int j1, int i2, int j2)
    {
        float moveCost = 100.0; // Initialize with a high cost
        // Diagonal move cost
        if ((j2 == j1 + 1 && i2 == i1 + 1) ||
            (i2 == i1 - 1 && j2 == j1 + 1) ||
            (i2 == i1 - 1 && j2 == j1 - 1) ||
            (j2 == j1 - 1 && i2 == i1 + 1))
        {
            moveCost = 1.4;
        }
        // Straight move cost
        else if ((j2 == j1 && i2 == i1 - 1) ||
                 (i2 == i1 && j2 == j1 - 1) ||
                 (i2 == i1 + 1 && j2 == j1) ||
                 (i1 == i2 && j2 == j1 + 1))
        {
            moveCost = 1.0;
        }
        return moveCost;
    }
};
