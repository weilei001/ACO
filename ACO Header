#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h> 
#include <string>

#include <ros/ros.h>

#include <actionlib/client/simple_action_client.h>
#include <move_base_msgs/MoveBaseAction.h>

#include <geometry_msgs/Twist.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <move_base_msgs/MoveBaseGoal.h>
#include <move_base_msgs/MoveBaseActionGoal.h>

#include "sensor_msgs/LaserScan.h"
#include "sensor_msgs/PointCloud2.h"

#include <nav_msgs/Odometry.h>
#include <nav_msgs/OccupancyGrid.h>
#include <nav_msgs/Path.h>
#include <nav_msgs/GetPlan.h>

#include <tf/tf.h>
#include <tf/transform_datatypes.h>
#include <tf/transform_listener.h>

#include <boost/foreach.hpp>

#include <costmap_2d/costmap_2d_ros.h>
#include <costmap_2d/costmap_2d.h>
#include <nav_core/base_global_planner.h>

#include <geometry_msgs/PoseStamped.h>
#include <angles/angles.h>

#include <base_local_planner/world_model.h>
#include <base_local_planner/costmap_model.h>

#include <set>

using namespace std;
using std::string;

#ifndef ACO_CPP
#define ACO_CPP

namespace ACO_planner
{
    class AcoPlannerROS: public nav_core::BaseGlobalPlanner
    {
        public:
            AcoPlannerROS();
            AcoPlannerROS(ros::NodeHandle &); 
            AcoPlannerROS(std::string name, costmap_2d::Costmap2DROS* costmap_ros); 

            ros::NodeHandle ROSNodeHandle;
            ros::Publisher _plan_pub;
            std::string _frame_id;
   
            void initialize(std::string name, costmap_2d::Costmap2DROS* costmap_ros);
            bool makePlan(const geometry_msgs::PoseStamped& start, 
                          const geometry_msgs::PoseStamped& goal, 
                          std::vector<geometry_msgs::PoseStamped>& plan);

            void getCorrdinate(float& x, float& y); 
            int convertToCellIndex(float x, float y);
            vector<int> getneighbors(int currentCell, vector<int> path);
            void convertToCoordinate(int index, float& x, float& y);
            bool isCellInsideMap(float x, float y);
            float getMoveCost(int CellID1, int CellID2);
            float getMoveCost(int i1, int j1, int i2, int j2);
            bool isVisited(int nextIndex, vector<int> path);
            bool isStartAndGoalCellsValid(int startCell, int goalCell);  
            vector<int> acoPlanner(int startCell, int goalCell);    
            vector<int> findPath(int startCell, int goalCell);
            vector<float> computeTransitionProbabilities(int goalCell, vector<int> neighbors, int currentCell);
            bool isFree(int CellID);
            int getNextCell(vector<int> neighbors, vector<float> probabilities);
            bool IsInBounds(int nextX, int nextY);
            vector<int> findFreeNeighborCell(int CellID);
            void mapToWorld(double mx, double my, double &wx, double &wy);

            int getCellIndex(int i, int j) // Convert grid coordinates to cell index
            {
                return (i * width) + j;  
            }

            int getCellRowID(int index) // Get row index from cell index
            {
                return index / width;
            }

            int getCellColID(int index) // Get column index from cell index
            {
                return index % width;
            }  

            float initialPheromoneValue; // Initial pheromone value
            int NumberOfIterations; // Number of iterations
            int Alpha; // Influence of pheromone trail
            int Beta; // Influence of heuristic information
            float EvaporationRate; // Pheromone evaporation rate
            int Q; // Constant for pheromone update calculation
            int NumberOfAnts; // Number of ants in each generation
            float originX;
            float originY;
            float resolution;
            costmap_2d::Costmap2DROS* costmap_ros_;
            costmap_2d::Costmap2D* costmap_;
            bool initialized_;
            int width;
            int height;  
    };
};
#endif
